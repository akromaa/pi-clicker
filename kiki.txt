clickerquest6784.pinet.com



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pi Payment Test App</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for the Inter font and overall aesthetics */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light gray background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
        }
        .container {
            background-color: #ffffff;
            padding: 2.5rem;
            border-radius: 1.5rem; /* More rounded corners */
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); /* Softer shadow */
            max-width: 500px;
            width: 90%;
            text-align: center;
        }
        .btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            margin: 0.5rem;
            border-radius: 0.75rem; /* Rounded buttons */
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Button shadow */
        }
        .btn-primary {
            background-color: #1a73e8; /* Blue for primary actions */
            color: white;
        }
        .btn-primary:hover {
            background-color: #0d47a1; /* Darker blue on hover */
            transform: translateY(-2px); /* Slight lift on hover */
        }
        .btn-secondary {
            background-color: #e2e8f0; /* Light gray for secondary */
            color: #4a5568;
        }
        .btn-secondary:hover {
            background-color: #cbd5e0; /* Darker gray on hover */
            transform: translateY(-2px);
        }
        .status-message {
            margin-top: 1.5rem;
            padding: 1rem;
            border-radius: 0.5rem;
            font-weight: 500;
            background-color: #e6fffa; /* Light green for success */
            color: #2c5282; /* Darker blue for text */
            border: 1px solid #b2f5ea;
            display: none; /* Hidden by default */
        }
        .status-message.error {
            background-color: #ffebeb; /* Light red for error */
            color: #c53030;
            border: 1px solid #feb2b2;
        }
        .status-message.visible {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold mb-6 text-gray-800">Pi Payment Demo</h1>
        <p class="text-gray-600 mb-6">
            Cette page simule l'intégration du SDK Pi pour l'authentification et les paiements.
            Les étapes côté serveur sont loguées dans la console du navigateur.
        </p>

        <!-- Buttons for actions -->
        <div class="space-y-4">
            <button id="authenticateBtn" class="btn btn-primary w-full">
                1. Authentifier l'utilisateur Pi
            </button>
            <button id="createPaymentBtn" class="btn btn-primary w-full" disabled>
                2. Créer un paiement (0.01 Pi)
            </button>
        </div>

        <!-- Message display area -->
        <div id="statusMessage" class="status-message"></div>
        <pre id="consoleOutput" class="text-left text-sm mt-4 p-4 bg-gray-50 rounded-lg overflow-auto max-h-48 hidden">
            <!-- Console output will be displayed here -->
        </pre>
    </div>

    <!-- Pi SDK script -->
    <script src="https://sdk.minepi.com/pi-sdk.js"></script>
    <script>
        // Global variables to store Pi authentication status and output messages
        let isAuthenticated = false;
        let authAccessToken = null;
        const consoleLog = [];

        // UI elements
        const authenticateBtn = document.getElementById('authenticateBtn');
        const createPaymentBtn = document.getElementById('createPaymentBtn');
        const statusMessageDiv = document.getElementById('statusMessage');
        const consoleOutputDiv = document.getElementById('consoleOutput');

        // Function to update the status message on the UI
        function updateStatus(message, isError = false) {
            statusMessageDiv.textContent = message;
            statusMessageDiv.className = `status-message visible ${isError ? 'error' : ''}`;
            addConsoleLog(`UI Status: ${message}`);
        }

        // Function to add messages to our custom console output area
        function addConsoleLog(message) {
            consoleLog.push(message);
            consoleOutputDiv.textContent = consoleLog.join('\n');
            consoleOutputDiv.scrollTop = consoleOutputDiv.scrollHeight; // Scroll to bottom
            consoleOutputDiv.classList.remove('hidden');
        }

        // Initialize Pi SDK
        // sandbox: true means we are working on the Testnet. Set to false for Mainnet.
        Pi.init({ version: "2.0", sandbox: true });
        addConsoleLog("Pi SDK initialisé en mode Sandbox (Testnet).");

        // Callback function for incomplete payments found during authentication
        // In a real app, you would handle these (e.g., cancel, complete, or review)
        function onIncompletePaymentFound(payment) {
            addConsoleLog(`[onIncompletePaymentFound] Paiement incomplet trouvé : ${JSON.stringify(payment)}`);
            updateStatus("Un paiement incomplet a été trouvé. Traitement en cours (simulé)...");
            
            // --- SIMULATION DU TRAITEMENT CÔTÉ SERVEUR POUR PAIEMENT INCOMPLET ---
            // Dans un scénario réel, vous enverriez ceci à votre backend pour décision.
            // Par exemple, pour l'annuler :
            // axiosClient.post('/payment/complete', { paymentId: payment.identifier, txid: payment.transaction.txid, debug: 'cancel' });
            addConsoleLog("[onIncompletePaymentFound] Simulation de l'envoi au serveur pour annulation/complétion.");
            // Pour cet exemple, nous allons simplement loguer.
            // Vous pourriez appeler Pi.cancelPayment(payment.identifier) si vous voulez l'annuler côté client.
            // Ou Pi.completePayment(payment.identifier, payment.transaction.txid)
        }

        // --- AUTHENTICATION ---
        authenticateBtn.addEventListener('click', async () => {
            authenticateBtn.disabled = true;
            updateStatus("Tentative d'authentification de l'utilisateur Pi...");
            addConsoleLog("Lancement de l'authentification Pi...");

            try {
                // Request 'payments' and 'username' scopes
                const scopes = ['payments', 'username'];
                const auth = await Pi.authenticate(scopes, onIncompletePaymentFound);
                
                isAuthenticated = true;
                authAccessToken = auth.accessToken;

                updateStatus(`Authentification réussie ! Bonjour ${auth.user.username}.`, false);
                addConsoleLog(`[Pi.authenticate] Réponse : ${JSON.stringify(auth)}`);
                console.log(`Hi there! You're ready to make payments!`); // Original console log from doc
                
                createPaymentBtn.disabled = false; // Enable payment button after successful auth

            } catch (error) {
                isAuthenticated = false;
                authAccessToken = null;
                updateStatus(`Erreur d'authentification : ${error.message}`, true);
                addConsoleLog(`[Pi.authenticate] Erreur : ${error.message}`);
                console.error(error); // Original console error from doc
                authenticateBtn.disabled = false; // Re-enable auth button on error
            }
        });

        // --- PAYMENT CALLBACs (Simulating Server Interaction) ---
        // These functions would typically make HTTP requests to your backend server.

        // Called when the payment ID is ready for server-side approval
        const onReadyForServerApproval = (paymentId) => {
            addConsoleLog(`[onReadyForServerApproval] Payment ID prêt pour approbation : ${paymentId}`);
            updateStatus(`Paiement prêt pour approbation côté serveur (ID: ${paymentId})...`);

            // --- SIMULATION DE L'APPEL CÔTÉ SERVEUR POUR APPROBATION ---
            // Dans un vrai scénario, vous feriez :
            // axiosClient.post('/payments/approve', { paymentId }, { headers: { Authorization: `Bearer ${authAccessToken}` } });
            addConsoleLog("[onReadyForServerApproval] SIMULATION : Requête POST vers votre backend pour /payments/approve.");
            // Pour cet exemple, nous simulons une approbation immédiate côté "serveur" après un petit délai.
            // Dans un environnement réel, ce serait votre serveur qui appellerait l'API Pi.
            setTimeout(() => {
                // Simulate success or failure from your backend's perspective.
                // For this demo, we assume your backend successfully calls Pi API to approve.
                addConsoleLog("[onReadyForServerApproval] SIMULATION : Votre backend a 'approuvé' le paiement avec l'API Pi.");
            }, 1000);
        };

        // Called after the blockchain transaction is submitted
        const onReadyForServerCompletion = (paymentId, txid) => {
            addConsoleLog(`[onReadyForServerCompletion] Transaction blockchain soumise. Payment ID: ${paymentId}, TXID: ${txid}`);
            updateStatus(`Transaction soumise à la blockchain Pi. Complétion côté serveur requise (ID: ${paymentId})...`);

            // --- SIMULATION DE L'APPEL CÔTÉ SERVEUR POUR COMPLÉTION ---
            // Dans un vrai scénario, vous feriez :
            // axiosClient.post('/payments/complete', { paymentId, txid }, { headers: { Authorization: `Bearer ${authAccessToken}` } });
            addConsoleLog("[onReadyForServerCompletion] SIMULATION : Requête POST vers votre backend pour /payments/complete.");
            // Ici, votre backend vérifierait le paiement et délivrerait le service/produit.
            // Ensuite, il informerait l'API Pi de la complétion.
            setTimeout(() => {
                addConsoleLog("[onReadyForServerCompletion] SIMULATION : Votre backend a 'complété' le paiement avec l'API Pi et délivré l'article.");
                updateStatus("Paiement complet et article (simulé) délivré ! 🎉", false);
            }, 1500);
        };

        // Called if the user cancels the payment
        const onCancel = (paymentId) => {
            addConsoleLog(`[onCancel] Paiement annulé par l'utilisateur : ${paymentId}`);
            updateStatus(`Paiement annulé par l'utilisateur (ID: ${paymentId}).`, true);
        };

        // Called if an error occurs during the payment process
        const onError = (error, payment) => {
            addConsoleLog(`[onError] Erreur de paiement : ${error.message}. Paiement : ${JSON.stringify(payment)}`);
            updateStatus(`Erreur lors du paiement : ${error.message}`, true);
        };


        // --- CREATE PAYMENT ---
        createPaymentBtn.addEventListener('click', async () => {
            if (!isAuthenticated) {
                updateStatus("Veuillez d'abord authentifier l'utilisateur.", true);
                return;
            }

            createPaymentBtn.disabled = true;
            updateStatus("Tentative de création d'un paiement...");
            addConsoleLog("Lancement de la création d'un paiement de 0.01 Pi...");

            const paymentData = {
                amount: 0.01,
                memo: "Test transaction from Pi Demo App",
                metadata: {
                    item: "Test Item",
                    quantity: 1,
                    demo_version: "1.0"
                }
            };

            const paymentCallbacks = {
                onReadyForServerApproval,
                onReadyForServerCompletion,
                onCancel,
                onError
            };

            try {
                const payment = await Pi.createPayment(paymentData, paymentCallbacks);
                updateStatus(`Paiement initié avec succès (ID: ${payment.identifier}). Attente de l'approbation utilisateur...`);
                addConsoleLog(`[Pi.createPayment] Paiement créé : ${JSON.stringify(payment)}`);
                console.log(payment); // Original console log from doc
            } catch (error) {
                updateStatus(`Erreur lors de la création du paiement : ${error.message}`, true);
                addConsoleLog(`[Pi.createPayment] Erreur : ${error.message}`);
                console.error(error); // Original console error from doc
                createPaymentBtn.disabled = false; // Re-enable button on error
            }
        });

        // Initial state update
        updateStatus("Cliquez sur 'Authentifier l'utilisateur Pi' pour commencer.");
        addConsoleLog("Application chargée. Attente de l'authentification.");
    </script>
</body>
</html>
